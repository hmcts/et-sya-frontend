#!groovy

//@Library("Infrastructure")
@Library('Infrastructure@add-perftest-vars') _

import uk.gov.hmcts.contino.AppPipelineDsl

def type = "nodejs"
def product = "et"
def component = "sya"
def branchesToSync = ['demo', 'ithc']

//Perf Vars
def config
def utils
def et_cui_applicant_preview
def dynatraceApiHost
def dynatraceEventIngestEndpoint
def dynatraceMetricIngestEndpoint
def dynatraceTriggerSyntheticEndpoint
def dynatraceSyntheticPerfTest
def dynatraceDashboardId
def dynatraceEntitySelector

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

def secrets = [
    'et-${env}': [
        secret('et-citizen-10-user-name', 'TEST_CASE_USERNAME'),
        secret('et-citizen-10-password', 'TEST_CASE_PASSWORD'),
        secret('perf-synthetic-monitor-token', 'PERF_SYNTHETIC_MONITOR_TOKEN'),
        secret('perf-metrics-token', 'PERF_METRICS_TOKEN'),
        secret('perf-event-token', 'PERF_EVENT_TOKEN'),
        secret('perf-synthetic-update-token', 'PERF_SYNTHETIC_UPDATE_TOKEN')
    ]
]

def inTestTrue = [
    'et-${env}': [
        secret('true', 'IN_TEST')
    ]
]

def inTestFalse = [
    'et-${env}': [
        secret('', 'IN_TEST')
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [ $class: 'AzureKeyVaultSecret',
      secretType: 'Secret',
      name: secretName,
      version: '',
      envVariable: envVar
    ]
}

withPipeline(type, product, component) {
  loadVaultSecrets(secrets)
  disableLegacyDeployment()
  syncBranchesWithMaster(branchesToSync)
  //enableSlackNotifications('#et-builds') // temp removal whilst wip

  afterAlways('build') {
    yarnBuilder.yarn('build')
  }

  afterAlways('smoketest:aat') {
     loadVaultSecrets(inTestTrue)
     publishHTML([
                    allowMissing         : true,
                    alwaysLinkToLastBuild: true,
                    keepAll              : true,
                    reportDir            : 'playwright-report',
                    reportFiles          : 'index.html',
                    reportName           : 'SYA Smoke Test Report'
            ])
      steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'playwright-report/**'
      stage('Accessibility') {
          yarnBuilder.yarn('test:accessibility')
          publishHTML([
              allowMissing         : true,
              alwaysLinkToLastBuild: true,
              keepAll              : true,
              reportDir            : 'playwright-report',
              reportFiles          : 'index.html',
              reportName           : 'Accessibility results'
          ])
          steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'playwright-report/**'
      }
    loadVaultSecrets(inTestFalse)
    sh """
       yarn playwright install
    """
  }

  afterAlways('functionalTest:aat') {
      publishHTML([
                    allowMissing         : true,
                    alwaysLinkToLastBuild: true,
                    keepAll              : true,
                    reportDir            : 'playwright-report',
                    reportFiles          : 'index.html',
                    reportName           : 'ET Functional UI Test Report'
            ])
      steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'playwright-report/**'
  }

  afterSuccess('functionalTest:aat') {
    stage("Performance Test") {
        loadVaultSecrets(secrets) // Load Perf secrets
        echo "Starting performance test stage..."
        // Log details of the build
        echo "Workspace: ${env.WORKSPACE}\nBranch: ${env.BRANCH_NAME}\nBuild Number: ${env.BUILD_NUMBER}\nDate/Time: ${new Date().format('yyyy-MM-dd HH:mm:ss')}"
        //debug
        echo "Token: ${env.PERF_SYNTHETIC_MONITOR_TOKEN}"
    }
  }

  afterAlways('smoketest:preview') {
    loadVaultSecrets(inTestTrue)
    publishHTML([
                    allowMissing         : true,
                    alwaysLinkToLastBuild: true,
                    keepAll              : true,
                    reportDir            : 'playwright-report',
                    reportFiles          : 'index.html',
                    reportName           : 'SYA Smoke Test Report'
            ])
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'playwright-report/**'
    stage('Accessibility') {
          yarnBuilder.yarn('test:accessibility')
          publishHTML([
              allowMissing         : true,
              alwaysLinkToLastBuild: true,
              keepAll              : true,
              reportDir            : 'playwright-report',
              reportFiles          : 'index.html',
              reportName           : 'Accessibility results'
          ])
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'playwright-report/**'
    }
    loadVaultSecrets(inTestFalse)
    sh """
       yarn playwright install
    """
  }

  afterAlways('functionalTest:preview') {
      publishHTML([
                    allowMissing         : true,
                    alwaysLinkToLastBuild: true,
                    keepAll              : true,
                    reportDir            : 'playwright-report',
                    reportFiles          : 'index.html',
                    reportName           : 'ET Functional UI Test Report'
            ])
      steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'playwright-report/**'
  }

  afterAlways('functionalTest:preview') {

        //==========================================
        // Load Performance Test Config
        //==========================================
        stage('Performance Test - Load Config & Utils') {
            echo "Check ENV VARS: ${env.environment}"
            echo "Loading Performance test configuration and utilities from the test/performance directory..."
            script {
                try {
                    config = load 'src/test/performance/config/config.groovy'
                    utils = load 'src/test/performance/utils/utils.groovy'
                } catch (Exception e) {
                    echo "Error Message: ${e.message}"
                }
                if (utils?.Test) {
                    echo "API Host: ${config.Test}"
                } else {
                echo "utils is null or Test is not defined"
                }
                echo "API Host: ${config.Test}"
            }
        }
        stage('Performance Test') {

        loadVaultSecrets(secrets) // Load Perf secrets

        //echo "DT API Host config.var = ${config.dynatraceApiHost}"

        //Perf Vars (*Need to add to config file)
        //def dynatraceApiHost = "https://yrk32651.live.dynatrace.com/"
        //def dynatraceEventIngestEndpoint = "api/v2/events/ingest"
        //def dynatraceMetricIngestEndpoint = "api/v2/metrics/ingest"
        //def dynatraceTriggerSynthticEndpoint = "api/v2/synthetic/executions/batch"
        //def dynatraceSyntheticPerfTest = "SYNTHETIC_TEST-008CAF328F244320"
        //def dynatraceDashboardId = "a4576442-06a9-4a76-baa5-5342a525679f"

        echo "Starting performance test stage..."
        // Log details of the build
        echo "Workspace: ${env.WORKSPACE}\nBranch: ${env.BRANCH_NAME}\nBuild Number: ${env.BUILD_NUMBER}\nDate/Time: ${new Date().format('yyyy-MM-dd HH:mm:ss')}"
        //Check token:
        echo "Token: ${env.PERF_SYNTHETIC_MONITOR_TOKEN}"

        //==========================================
        //Trigger Custom DT Event with Info:
        //==========================================
        script {
            echo "Posting Custom DT Event:\nCONFIG\n DT Host: ${config.dynatraceApiHost}\nSynthetic Perftest: ${config.dynatraceSyntheticPerfTest}\n EntitySelector: ${config.dynatraceEntitySelector}\n EventEndpoint: ${config.dynatraceEventIngestEndpoint}\nDashboard: ${config.dynatraceDashboardURL}"
            
            def postDTEvent = utils.postDynatraceEvent (
                        config.dynatraceApiHost,
                        config.dynatraceSyntheticPerfTest,
                        config.dynatraceDashboardId,
                        config.dynatraceEntitySelector
                )

        //==========================================    
        /// POST Metric to highlight a deployment
        //==========================================
            echo "Posting Custom DT Metric:\nCONFIG\nDT Host: ${config.dynatraceApiHost}\nDT Endpoint: ${config.dynatraceMetricIngestEndpoint}\n MetricType: ${config.dynatraceMetricType}\n MetricTag: ${config.dynatraceMetricTag}\n Environment: perftest"
            try {
                def postDynatraceMetric = utils.postDynatraceMetric (
                            config.dynatraceApiHost,
                            config.dynatraceMetricIngestEndpoint,
                            config.dynatraceMetricType,
                            config.dynatraceMetricTag,
                            'perftest'
                )
            } catch (Exception e)
            {
                echo "Failure posting Dynatrace Metric: ${e.message}"
            }

        //==================================================================
        // For Preview -> Update the DT Synthetic Test with the correct URL & enable
        //==================================================================
            echo "Updating Dynatrace Synthetic Test:\nCONFIG\nDT Host: ${config.dynatraceApiHost}\nDT Endpoint: ${config.dynatraceUpdateSyntheticEndpoint}\nSyntheticTest: SYNTHETIC_TEST-58D99F542AAB721C\nPreviewURL: ${env.AKS_TEST_URL}\nEnvironment: perftest"
            def putDynatraceSyntheticTest = null
            try {
                putDynatraceSyntheticTest = utils.putDynatraceSyntheticTest (
                            config.dynatraceApiHost,
                            config.dynatraceUpdateSyntheticEndpoint,
                            "SYNTHETIC_TEST-58D99F542AAB721C",
                            "true",
                            env.AKS_TEST_URL,
                            "et_cui_applicant_preview")
            } catch (Exception e)
            {
                echo "Failure Updating Dynatrace Synthetic: ${e.message}"
            }

        //==========================================   
        //Trigger Dynatrace Synthetic Test
        //==========================================    
            echo "Triggering Dynatrace Synthetic Test:\nCONFIG\nDT Host: ${config.dynatraceApiHost}\nDT Endpoint: ${config.dynatraceTriggerSyntheticEndpoint}\n SyntheticTest: ${config.dynatraceSyntheticPerfTest}\n Dashboard: ${config.dynatraceDashboardURL}\n Environment: perftest"
            def postDynatraceSyntheticTest = null 
            try {
                postDynatraceSyntheticTest = utils.postDynatraceSyntheticTest (
                            config.dynatraceApiHost,
                            config.dynatraceTriggerSyntheticEndpoint,
                            config.dynatraceSyntheticPerfTest
                )
            } catch (Exception e)
            {
                echo "Failure Triggering Dynatrace Synthetic: ${e.message}"
            }

        //==========================================  
        //Check for Status of Synthetic Test
        //========================================== 
        def status = "TRIGGERED"
        def checkCount = 1
        def getDynatraceSyntheticStatus = null 
        echo "Checking Status of Synthetic....${postDynatraceSyntheticTest.lastExecutionId}"

        while (status == "TRIGGERED" && checkCount <= 16) {
            echo "Checking Status of Synthetic Test:\n TestID: ${postDynatraceSyntheticTest.lastExecutionId}\nStatus: ${config.dynatraceTriggerSyntheticEndpoint} \nCheckCount: ${checkCount} "
            try {
                getDynatraceSyntheticStatus = utils.getDynatraceSyntheticStatus (
                            config.dynatraceApiHost,
                            postDynatraceSyntheticTest.lastExecutionId
                )
                status = getDynatraceSyntheticStatus.executionStatus
            } catch (Exception e)
            {
                echo "Failure posting Dynatrace Metric: ${e.message}"
                break
            }
            if (status == "TRIGGERED") {
                sleep 20
                checkCount++
            }
        } //End of While
        } //End of script
    } //End of Stage
  } // End of after always

  enablePactAs([
    AppPipelineDsl.PactRoles.CONSUMER
   ])
}
