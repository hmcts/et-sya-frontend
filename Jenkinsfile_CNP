#!groovy

@Library("Infrastructure")

import uk.gov.hmcts.contino.AppPipelineDsl

def type = "nodejs"
def product = "et"
def component = "sya"
def branchesToSync = ['perftest', 'demo', 'ithc']

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

def secrets = [
    'et-${env}': [
        secret('test-username', 'TEST_CASE_USERNAME'),
        secret('test-password', 'TEST_CASE_PASSWORD')
    ]
]

def inTestTrue = [
    'et-${env}': [
        secret('true', 'IN_TEST')
    ]
]

def inTestFalse = [
    'et-${env}': [
        secret('', 'IN_TEST')
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [ $class: 'AzureKeyVaultSecret',
      secretType: 'Secret',
      name: secretName,
      version: '',
      envVariable: envVar
    ]
}

withPipeline(type, product, component) {
  loadVaultSecrets(secrets)
  disableLegacyDeployment()
  syncBranchesWithMaster(branchesToSync)

  afterAlways('build') {
    yarnBuilder.yarn('build')
  }

  afterAlways('deploy:aat') {
    loadVaultSecrets(inTestTrue)
      stage('Accessibiltiy') {
          yarnBuilder.yarn('tests:a11y')
          publishHTML([
              allowMissing         : true,
              alwaysLinkToLastBuild: true,
              keepAll              : true,
              reportDir            : "functional-output/accessibility-report",
              reportFiles          : 'a11y.html',
              reportName           : 'Accessibility results'
      ])
      }
      loadVaultSecrets(inTestFalse)
  }
  afterAlways('deploy:preview') {
    loadVaultSecrets(inTestTrue)
      stage('Accessibiltiy') {
          yarnBuilder.yarn('tests:a11y')
          publishHTML([
              allowMissing         : true,
              alwaysLinkToLastBuild: true,
              keepAll              : true,
              reportDir            : "functional-output/accessibility-report",
              reportFiles          : 'a11y.html',
              reportName           : 'Accessibility results'
        ])
      }
      loadVaultSecrets(inTestFalse)
  }

  enablePactAs([
    AppPipelineDsl.PactRoles.CONSUMER
   ])
}
