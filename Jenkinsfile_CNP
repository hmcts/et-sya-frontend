#!groovy

//@Library("Infrastructure")

@Library("Infrastructure@add-perftest-vars") _

import uk.gov.hmcts.contino.AppPipelineDsl

def type = "nodejs"
def product = "et"
def component = "sya"
def branchesToSync = ['demo', 'ithc']

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

def secrets = [
    'et-${env}': [
        secret('et-citizen-10-user-name', 'TEST_CASE_USERNAME'),
        secret('et-citizen-10-password', 'TEST_CASE_PASSWORD'),
        secret('perf-synthetic-monitor-token', 'PERF_SYNTHETIC_MONITOR_TOKEN'),
	    secret('perf-metrics-token', 'PERF_METRICS_TOKEN'),
	    secret('perf-event-token', 'PERF_EVENT_TOKEN'),
        secret('perf-synthetic-update-token', 'PERF_SYNTHETIC_UPDATE_TOKEN')
    ]
]

def inTestTrue = [
    'et-${env}': [
        secret('true', 'IN_TEST')
    ]
]

def inTestFalse = [
    'et-${env}': [
        secret('', 'IN_TEST')
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [ $class: 'AzureKeyVaultSecret',
      secretType: 'Secret',
      name: secretName,
      version: '',
      envVariable: envVar
    ]
}

withPipeline(type, product, component) {
  loadVaultSecrets(secrets)
  disableLegacyDeployment()
  syncBranchesWithMaster(branchesToSync)
  enablePerformanceTestStages(timeout: 15)
  enableGatlingLoadTests([
    repo: 'https://github.com/hmcts/et-performance.git',
    branch: 'master',
    simulation: 'ETCreateClaim',
    users: 5,
    rampDuration: '60s',
    testDuration: '300s',
    timeout: 10
  ])
  //enableSlackNotifications('#et-builds')

  afterAlways('build') {
    yarnBuilder.yarn('build')
  }

  afterAlways('smoketest:aat') {
     loadVaultSecrets(inTestTrue)
     publishHTML([
                    allowMissing         : true,
                    alwaysLinkToLastBuild: true,
                    keepAll              : true,
                    reportDir            : 'playwright-report',
                    reportFiles          : 'index.html',
                    reportName           : 'SYA Smoke Test Report'
            ])
      steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'playwright-report/**'
      stage('Accessibility') {
          yarnBuilder.yarn('test:accessibility')
          publishHTML([
              allowMissing         : true,
              alwaysLinkToLastBuild: true,
              keepAll              : true,
              reportDir            : 'playwright-report',
              reportFiles          : 'index.html',
              reportName           : 'Accessibility results'
          ])
          steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'playwright-report/**'
      }
    loadVaultSecrets(inTestFalse)
    sh """
       yarn playwright install
    """
  }

  afterAlways('functionalTest:aat') {
      publishHTML([
                    allowMissing         : true,
                    alwaysLinkToLastBuild: true,
                    keepAll              : true,
                    reportDir            : 'playwright-report',
                    reportFiles          : 'index.html',
                    reportName           : 'ET Functional UI Test Report'
            ])
      steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'playwright-report/**'
  }

  afterAlways('smoketest:preview') {
    loadVaultSecrets(inTestTrue)
    publishHTML([
                    allowMissing         : true,
                    alwaysLinkToLastBuild: true,
                    keepAll              : true,
                    reportDir            : 'playwright-report',
                    reportFiles          : 'index.html',
                    reportName           : 'SYA Smoke Test Report'
            ])
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'playwright-report/**'
    stage('Accessibility') {
          yarnBuilder.yarn('test:accessibility')
          publishHTML([
              allowMissing         : true,
              alwaysLinkToLastBuild: true,
              keepAll              : true,
              reportDir            : 'playwright-report',
              reportFiles          : 'index.html',
              reportName           : 'Accessibility results'
          ])
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'playwright-report/**'
    }
    loadVaultSecrets(inTestFalse)
    sh """
       yarn playwright install
    """
  }

  afterAlways('functionalTest:preview') {
      publishHTML([
                    allowMissing         : true,
                    alwaysLinkToLastBuild: true,
                    keepAll              : true,
                    reportDir            : 'playwright-report',
                    reportFiles          : 'index.html',
                    reportName           : 'ET Functional UI Test Report'
            ])
      steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'playwright-report/**'
  }

  enablePactAs([
    AppPipelineDsl.PactRoles.CONSUMER
   ])
}
