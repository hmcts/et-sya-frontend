#!groovy

properties([
// H allow predefined but random minute see https://en.wikipedia.org/wiki/Cron#Non-standard_characters
pipelineTriggers([cron('H 8 * * 1-5')]),
parameters([
        string(
          name: 'TEST_URL',
          defaultValue: 'https://et-sya.aat.platform.hmcts.net',
          description: 'The URL you want to run tests against'
        ),
        string(
          name: 'ZAP_URL_EXCLUSIONS',
          defaultValue:
            "-config globalexcludeurl.url_list.url\\(1\\).regex='.*/assets.*' " +
            "-config globalexcludeurl.url_list.url\\(2\\).regex='.*/cookies.*' " +
            "-config globalexcludeurl.url_list.url\\(3\\).regex='.*/main.[a-fA-F0-9]{20}.js' " +
            "-config globalexcludeurl.url_list.url\\(4\\).regex='.*/main.[a-fA-F0-9]{20}.css' " +
            "-config globalexcludeurl.url_list.url\\(5\\).regex='.*/sitemap.xml(\\?lng=en)?' " +
            "-config globalexcludeurl.url_list.url\\(6\\).regex='.*/robots.txt' " +
            "-config globalexcludeurl.url_list.url\\(7\\).regex='.*/accessibility.*' " +
            "-config rules.cookie.ignorelist=_ga,_gid,_gat,dtCookie,dtLatC,dtPC,dtSa,rxVisitor,rxvt,i18next,et-sya-session"
        ),
        string(
          name: 'ALERT_FILTERS',
          defaultValue:
            "-config globalalertfilter.filters.filter\\(0\\).ruleid=10055 " +
            "-config globalalertfilter.filters.filter\\(0\\).newrisk=-1 " +
            "-config globalalertfilter.filters.filter\\(0\\).enabled=true " +

            "-config globalalertfilter.filters.filter\\(1\\).ruleid=90027 " +
            "-config globalalertfilter.filters.filter\\(1\\).newrisk=-1 " +
            "-config globalalertfilter.filters.filter\\(1\\).enabled=true " +

            "-config globalalertfilter.filters.filter\\(2\\).ruleid=10029 " +
            "-config globalalertfilter.filters.filter\\(2\\).newrisk=-1 " +
            "-config globalalertfilter.filters.filter\\(2\\).enabled=true " +

            "-config globalalertfilter.filters.filter\\(3\\).ruleid=10058 " +
            "-config globalalertfilter.filters.filter\\(3\\).newrisk=-1 " +
            "-config globalalertfilter.filters.filter\\(3\\).enabled=true " +

            "-config globalalertfilter.filters.filter\\(4\\).ruleid=10027 " +
            "-config globalalertfilter.filters.filter\\(4\\).newrisk=-1 " +
            "-config globalalertfilter.filters.filter\\(4\\).enabled=true " +

            "-config globalalertfilter.filters.filter\\(5\\).ruleid=10109 " +
            "-config globalalertfilter.filters.filter\\(5\\).newrisk=-1 " +
            "-config globalalertfilter.filters.filter\\(5\\).enabled=true " +

            "-config globalalertfilter.filters.filter\\(6\\).ruleid=10049 " +
            "-config globalalertfilter.filters.filter\\(6\\).newrisk=-1 " +
            "-config globalalertfilter.filters.filter\\(6\\).enabled=true " +

            "-config globalalertfilter.filters.filter\\(7\\).ruleid=10112 " +
            "-config globalalertfilter.filters.filter\\(7\\).newrisk=-1 " +
            "-config globalalertfilter.filters.filter\\(7\\).enabled=true " +

            "-config globalalertfilter.filters.filter\\(8\\).ruleid=10104 " +
            "-config globalalertfilter.filters.filter\\(8\\).newrisk=-1 " +
            "-config globalalertfilter.filters.filter\\(8\\).enabled=true " +

            "-config globalalertfilter.filters.filter\\(9\\).ruleid=10031 " +
            "-config globalalertfilter.filters.filter\\(9\\).newrisk=-1 " +
            "-config globalalertfilter.filters.filter\\(9\\).enabled=true "
        ),
        string(name: 'CUSTOM_COOKIES')
    ])
])

@Library("Infrastructure")

def type = "nodejs"
def product = "et"
def component = "sya"
def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)
def urlExclusions = params.ZAP_URL_EXCLUSIONS
def alertFilters = params.ALERT_FILTERS
def customCookies = params.CUSTOM_COOKIES
def secrets = [
    'et-aat': [
        secret('et-citizen-10-user-name', 'TEST_CASE_USERNAME'),
        secret('et-citizen-10-password', 'TEST_CASE_PASSWORD')
    ]
]
static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [ $class: 'AzureKeyVaultSecret',
      secretType: 'Secret',
      name: secretName,
      version: '',
      envVariable: envVar
    ]
}


withNightlyPipeline(type, product, component) {
    loadVaultSecrets(secrets)
    enableFortifyScan('et-aat')
    enableSecurityScan(
           urlExclusions: urlExclusions,
           alertFilters: alertFilters
    )

    env.TEST_URL = params.TEST_URL
    env.RUNNING_ENV = params.ENVIRONMENT

    before('fortify-scan') {
        sh """
           yarn playwright install
        """
    }

    afterAlways('fortify-scan') {
        stage('Functional SYA UI tests chromium') {
            try {
                yarnBuilder.yarn('test:functional-chromium')
            } catch (Error) {
                unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
            } finally {
                publishHTML([
                        allowMissing: true,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'playwright-report',
                        reportFiles: 'index.html',
                        reportName: 'SYA-UITestChromiumReport'
                ])
                steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'playwright-report/**'
            }
        }
        stage('Functional SYA UI tests firefox') {
            try {
                yarnBuilder.yarn('test:functional-firefox')
            } catch (Error) {
                unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
            } finally {
                publishHTML([
                        allowMissing: true,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'playwright-report',
                        reportFiles: 'index.html',
                        reportName: 'SYA-UITestFirefoxReport'
                ])
                steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'playwright-report/**'
            }
        }
        stage('Functional SYA UI tests webkit ') {
            try {
                yarnBuilder.yarn('test:functional-webkit')
            } catch (Error) {
                unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
            } finally {
                publishHTML([
                        allowMissing: true,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'playwright-report',
                        reportFiles: 'index.html',
                        reportName: 'SYA-UITestWebkitReport'
                ])
                steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'playwright-report/**'
            }
        }

    }

    afterSuccess('fortify-scan') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
    }

}
